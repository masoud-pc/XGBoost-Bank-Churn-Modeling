fdfdsf
clc
install.packages('caTools')
library('caTools')
set.seed(123)
split = sample.split(dataset$purchased, SplitRatio = 0.8) # in R we put the ratio of  train set
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing value
dataset$Age = ifelse(
is.na(dataset$Age), #test
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Age  #false
)
dataset$Salary = ifelse(
is.na(dataset$Salary), #test
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Salary  #false
)
# Encoding the categorical data
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3)
)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1)
)
# Splitting the dataset into training set and test set
# install.packages('caTools')
library('caTools')  #activating and selecting the library
set.seed(123)
split = sample.split(dataset$purchased, SplitRatio = 0.8) # in R we put the ratio of  train set
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing value
dataset$Age = ifelse(
is.na(dataset$Age), #test
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Age  #false
)
dataset$Salary = ifelse(
is.na(dataset$Salary), #test
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Salary  #false
)
# Encoding the categorical data
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3)
)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1)
)
# Splitting the dataset into training set and test set
# install.packages('caTools')
library('caTools')  #activating and selecting the library
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8) # in R we put the ratio of  train set
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing value
dataset$Age = ifelse(
is.na(dataset$Age), #test
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Age  #false
)
dataset$Salary = ifelse(
is.na(dataset$Salary), #test
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Salary  #false
)
# Encoding the categorical data
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3)
)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1)
)
# Splitting the dataset into training set and test set
# install.packages('caTools')
library('caTools')  #activating and selecting the library
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8) # in R we put the ratio of  train set
dataset = read.csv('Data.csv')
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing value
dataset$Age = ifelse(
is.na(dataset$Age), #test
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Age  #false
)
dataset$Salary = ifelse(
is.na(dataset$Salary), #test
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),  #true
dataset$Salary  #false
)
# Encoding the categorical data
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3)
)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1)
)
# Splitting the dataset into training set and test set
# install.packages('caTools')
library('caTools')  #activating and selecting the library
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8) # in R we put the ratio of  train set
dataset = read.csv('Data.csv')
read.csv(Data.csv)
library(readr)
Position_Salaries <- read_csv("Desktop/A/Data Science and ML/Udemy course/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 9 - Random Forest Regression/Random_Forest_Regression/Position_Salaries.csv")
View(Position_Salaries)
setwd("~/Desktop/A/Data Science and ML/Udemy course/Machine Learning A-Z Template Folder/Part 10 - Model Selection & Boosting/Section 49 - XGBoost/XGBoost")
# XGBoost
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
View(dataset)
View(Position_Salaries)
View(dataset)
dataset
install.packages('xgboost')
library(xgboost)
classifier = xgboost(data = (training_set[-11]), label = training_set$Exited, nrounds = 10)
# XGBoost
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the categorical variables as factors
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting XGBoost to the Training set
# install.packages('xgboost')
library(xgboost)
classifier = xgboost(data = as.matrix(training_set[-11]), label = training_set$Exited, nrounds = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = as.matrix(test_set[-11]))
y_pred = (y_pred >= 0.5)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
# Applying k-Fold Cross Validation
# install.packages('caret')
library(caret)
folds = createFolds(training_set$Exited, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = xgboost(data = as.matrix(training_set[-11]), label = training_set$Exited, nrounds = 10)
y_pred = predict(classifier, newdata = as.matrix(test_fold[-11]))
y_pred = (y_pred >= 0.5)
cm = table(test_fold[, 11], y_pred)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
cm
accuracy
